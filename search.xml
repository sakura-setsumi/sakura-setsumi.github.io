<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vpn</title>
      <link href="/post/2a08f859.html"/>
      <url>/post/2a08f859.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="搭建trogan"><a href="#搭建trogan" class="headerlink" title="搭建trogan"></a>搭建trogan</h3><h4 id="输入命令"><a href="#输入命令" class="headerlink" title="输入命令"></a>输入命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate -q -O trojan_install.sh &quot;https://raw.githubusercontent.com/xyz690/Trojan/master/trojan_install.sh&quot; &amp;&amp; chmod +x trojan_install.sh &amp;&amp; bash trojan_install.sh</span><br></pre></td></tr></table></figure><p><strong>然后输入绑定的域名</strong></p><p><img src="/%22img/vpn1.png%22" alt="命令执行结果"></p><p><strong>出现这个信息就是安装成功了</strong></p><h4 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status trojan.service</span><br></pre></td></tr></table></figure><p><strong>成功运行显示:</strong></p><p><img src="/%22img/vpn2.png%22" alt="运行状态"></p><h4 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/src/trojan-macos/trojan/config.json</span><br></pre></td></tr></table></figure><p><strong>出现配置如下:</strong></p><p><img src="/%22img/vpn3.png%22" alt="运行状态"></p><ol><li><p><code>remote_addr</code>：服务器地址（浏览器输入这个地址能打开网页）</p></li><li><p><code>remote_port</code>：端口</p></li><li><p><code>password</code>:密码</p></li></ol></div>]]></content>
      
      
      <categories>
          
          <category> centos,vps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload</title>
      <link href="/post/17bde61f.html"/>
      <url>/post/17bde61f.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="S3上传创建临时文件，然后分片上传"><a href="#S3上传创建临时文件，然后分片上传" class="headerlink" title="S3上传创建临时文件，然后分片上传"></a>S3上传创建临时文件，然后分片上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> SecurityUtils.getUsername();</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;.*[\\u4e00-\\u9fa5]+.*&quot;</span>;</span><br><span class="line"><span class="comment">// 创建线程池，根据实际环境调整线程数</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">List&lt;Future&lt;?&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line"><span class="keyword">try</span> (<span class="type">ZipArchiveInputStream</span> <span class="variable">zipInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipArchiveInputStream</span>(inputStream)) &#123;</span><br><span class="line">    ZipArchiveEntry entry;</span><br><span class="line">    <span class="keyword">while</span> ((entry = zipInputStream.getNextZipEntry()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!entry.isDirectory()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">zipEntryName</span> <span class="operator">=</span> entry.getName();</span><br><span class="line">            <span class="keyword">if</span> (zipEntryName.matches(regex)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;压缩文件中不能包含中文名&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理 key</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> StringUtils.isNotEmpty(folderName)</span><br><span class="line">                ? folderName + <span class="string">&quot;/&quot;</span> + zipEntryName.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">                : zipEntryName.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建临时文件存放当前条目的数据（确保不占用大量内存）</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">tempFile</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;upload_&quot;</span>, <span class="string">&quot;_&quot;</span> + zipEntryName.replaceAll(<span class="string">&quot;[\\\\/]&quot;</span>, <span class="string">&quot;_&quot;</span>));</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(tempFile)) &#123;</span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8192</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span> ((len = zipInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 提交上传任务，每个任务从磁盘读取临时文件进行上传</span></span><br><span class="line">            <span class="type">ZipArchiveEntry</span> <span class="variable">finalEntry</span> <span class="operator">=</span> entry;</span><br><span class="line">            futures.add(executor.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">uploadStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(tempFile)) &#123;</span><br><span class="line">                    <span class="comment">// 设置对象元数据</span></span><br><span class="line">                    <span class="type">ObjectMetadata</span> <span class="variable">objectMetadata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMetadata</span>();                                                            objectMetadata.setContentType(getContentType(finalEntry.getName()));</span><br><span class="line">                    objectMetadata.addUserMetadata(<span class="string">&quot;uploader&quot;</span>, username);</span><br><span class="line">                    objectMetadata.setContentLength(tempFile.length());</span><br><span class="line">                    <span class="comment">// 调用分片上传（建议内部采用 TransferManager 或 S3 异步 API）</span></span><br><span class="line">                    initiateMultipartUpload2(key, uploadStream, objectMetadata);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">//                            log.error(&quot;上传文件 &#123;&#125; 失败，原因：&#123;&#125;&quot;, key, e.getMessage(), e);</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传文件 &quot;</span> + key + <span class="string">&quot; 失败&quot;</span>, e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 上传完成后删除临时文件</span></span><br><span class="line">                    <span class="keyword">if</span> (!tempFile.delete()) &#123;</span><br><span class="line">                        <span class="comment">// 如删除失败可记录日志</span></span><br><span class="line">                        System.err.println(<span class="string">&quot;临时文件删除失败：&quot;</span> + tempFile.getAbsolutePath());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    inputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待所有上传任务完成</span></span><br><span class="line"><span class="keyword">for</span> (Future&lt;?&gt; future : futures) &#123;</span><br><span class="line">    future.get();  <span class="comment">// 如果某个任务失败，这里会抛出异常</span></span><br><span class="line">&#125;</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure><h3 id="分片上传实现"><a href="#分片上传实现" class="headerlink" title="分片上传实现"></a>分片上传实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化分片上传</span></span><br><span class="line"><span class="type">InitiateMultipartUploadRequest</span> <span class="variable">initRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitiateMultipartUploadRequest</span>(bucketName, key, objectMetadata);</span><br><span class="line"><span class="type">InitiateMultipartUploadResult</span> <span class="variable">initResponse</span> <span class="operator">=</span> amazonS3.initiateMultipartUpload(initRequest);</span><br><span class="line"><span class="type">String</span> <span class="variable">uploadId</span> <span class="operator">=</span> initResponse.getUploadId();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分片上传设置</span></span><br><span class="line">List&lt;PartETag&gt; partETags = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">partSize</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 每个分片 5MB</span></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[partSize];</span><br><span class="line"><span class="type">int</span> <span class="variable">partNumber</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 按分片大小读取数据</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">bytesReadTotal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (bytesReadTotal &lt; partSize) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> inputStream.read(buffer, bytesReadTotal, partSize - bytesReadTotal);</span><br><span class="line">        <span class="keyword">if</span> (bytesRead == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bytesReadTotal += bytesRead;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bytesReadTotal == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 没有数据则退出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 ByteArrayInputStream 包装当前分片数据</span></span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">partStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(buffer, <span class="number">0</span>, bytesReadTotal);</span><br><span class="line">    <span class="comment">// 创建上传请求</span></span><br><span class="line">    <span class="type">UploadPartRequest</span> <span class="variable">uploadRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadPartRequest</span>()</span><br><span class="line">        .withBucketName(bucketName)</span><br><span class="line">        .withKey(key)</span><br><span class="line">        .withUploadId(uploadId)</span><br><span class="line">        .withPartNumber(partNumber)</span><br><span class="line">        .withPartSize(bytesReadTotal)</span><br><span class="line">        .withInputStream(partStream);</span><br><span class="line">    <span class="type">UploadPartResult</span> <span class="variable">uploadResult</span> <span class="operator">=</span> amazonS3.uploadPart(uploadRequest);</span><br><span class="line">    partETags.add(uploadResult.getPartETag());</span><br><span class="line">    partNumber++;</span><br><span class="line">    <span class="comment">// 如果本次读取的数据小于分片大小，说明已到末尾，退出循环</span></span><br><span class="line">    <span class="keyword">if</span> (bytesReadTotal &lt; partSize) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成分片上传</span></span><br><span class="line"><span class="type">CompleteMultipartUploadRequest</span> <span class="variable">completeRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompleteMultipartUploadRequest</span>(</span><br><span class="line">    bucketName, key, uploadId, partETags);</span><br><span class="line">amazonS3.completeMultipartUpload(completeRequest);</span><br></pre></td></tr></table></figure><h3 id="下载文件并打成压缩包"><a href="#下载文件并打成压缩包" class="headerlink" title="下载文件并打成压缩包"></a>下载文件并打成压缩包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">folderPrefix = folderPrefix.trim().replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">response.setContentType(<span class="string">&quot;application/zip&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=file.zip&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">ZipOutputStream</span> <span class="variable">zipOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(response.getOutputStream())) &#123;</span><br><span class="line">    <span class="type">ListObjectsV2Request</span> <span class="variable">listObjectsRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListObjectsV2Request</span>()</span><br><span class="line">        .withBucketName(bucketName)</span><br><span class="line">        .withPrefix(folderPrefix + <span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">continuationToken</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">moreFiles</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (moreFiles) &#123;</span><br><span class="line">        listObjectsRequest.setContinuationToken(continuationToken);</span><br><span class="line">        <span class="type">ListObjectsV2Result</span> <span class="variable">result</span> <span class="operator">=</span> amazonS3.listObjectsV2(listObjectsRequest);</span><br><span class="line">        List&lt;S3ObjectSummary&gt; objectSummaries = result.getObjectSummaries();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (S3ObjectSummary summary : objectSummaries) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> summary.getKey();</span><br><span class="line">            downloadFile(bucketName, key, zipOutputStream, folderPrefix);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        continuationToken = result.getNextContinuationToken();</span><br><span class="line">        moreFiles = continuationToken != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zipOutputStream.finish();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">S3Object</span> <span class="variable">s3Object</span> <span class="operator">=</span> amazonS3.getObject(bucketName, key);</span><br><span class="line">     <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> s3Object.getObjectContent()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的 ZIP 条目</span></span><br><span class="line">    <span class="type">ZipEntry</span> <span class="variable">zipEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(key.substring(folderPrefix.length() + <span class="number">1</span>));</span><br><span class="line">    zipOutputStream.putNextEntry(zipEntry);</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="keyword">while</span> ((length = inputStream.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        zipOutputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">    &#125;</span><br><span class="line">    zipOutputStream.closeEntry(); <span class="comment">// 关闭当前的 ZIP 条目</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> java,steam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOM情况的处理</title>
      <link href="/post/408ec80b.html"/>
      <url>/post/408ec80b.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="inspect查看容器断开的原因"><a href="#inspect查看容器断开的原因" class="headerlink" title="inspect查看容器断开的原因"></a>inspect查看容器断开的原因</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;Id&quot;: &quot;b6c047e33880579a8143a92c83b96562aaca8cd0e5089f3d2ba0df1d820cc35b&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2025-01-22T03:58:34.723887312Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;java&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-Xms512m&quot;,</span><br><span class="line">            &quot;-Xmx2g&quot;,</span><br><span class="line">            &quot;-Xss512k&quot;,</span><br><span class="line">            &quot;-XX:MaxDirectMemorySize=512m&quot;,</span><br><span class="line">            &quot;-XX:+UseContainerSupport&quot;,</span><br><span class="line">            &quot;-jar&quot;,</span><br><span class="line">            &quot;pml-admin.jar&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;exited&quot;,</span><br><span class="line">            &quot;Running&quot;: false,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: true,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 0,</span><br><span class="line">            &quot;ExitCode&quot;: 137,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2025-03-05T08:00:06.251204387Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;2025-03-05T11:07:11.059290614Z&quot;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><em>ExitCode是退出码，137为内存溢出</em></p><h3 id="查看容器内存限制"><a href="#查看容器内存限制" class="headerlink" title="查看容器内存限制"></a>查看容器内存限制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect pml | grep &quot;Memory&quot;</span><br></pre></td></tr></table></figure><p><em>如果 <code>Memory</code> 值为 <code>0</code>，说明没有内存限制。如果有值，比如 <code>2147483648</code>（即 2GB），说明容器最多只能使用 2GB 内存，可能不够。</em></p><h3 id="启用swap"><a href="#启用swap" class="headerlink" title="启用swap"></a>启用swap</h3><ul><li><p>什么是Swap？</p><p><em>Swap（交换空间）是一种 <strong>虚拟内存</strong>，当物理内存（RAM）不足时，操作系统会把不常用的内存数据 <strong>临时存放到硬盘</strong>（Swap 空间）上，以避免进程因内存不足而被杀死。</em></p></li><li><p>Swap的作用</p><ol><li>防止 OOM（内存不足）<ul><li>当物理内存不够时，系统会把一些暂时不用的数据转移到 Swap，而不是直接杀死进程（例如你的 Java 进程）。</li></ul></li><li>提升系统稳定性<ul><li>如果服务器运行多个进程，并且偶尔内存峰值较高，Swap 能起到缓冲作用，防止进程被强制终止。</li></ul></li><li>支持更大的并发<ul><li>服务器可能需要运行多个应用，物理内存有限时，Swap 允许更好地分配资源，减少应用崩溃的风险。</li></ul></li></ol></li><li><p>Swap的缺点</p><ul><li><strong>速度慢</strong>：Swap 依赖硬盘，访问速度远远慢于 RAM，使用过多会导致系统变慢（特别是 HDD）。</li><li><strong>可能影响性能</strong>：如果系统频繁使用 Swap，可能会导致 <strong>高 IO 负载</strong>，降低整体性能。</li></ul></li><li><p>&#x1F4A1; 解决方案：</p><ul><li>建议只把 Swap 作为备用，不要让 Swap 变成主要内存！</li><li>如果 Swap 使用量过高，说明物理内存不够，建议增加 RAM。</li><li><strong>对于 Java 应用，建议调整 <code>-Xmx</code> 以减少内存占用，而不是依赖 Swap。</strong></li></ul></li></ul><h4 id="创建swap（2g）"><a href="#创建swap（2g）" class="headerlink" title="创建swap（2g）"></a>创建swap（2g）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fallocate -l 2G /swapfile</span><br><span class="line">chmod 600 /swapfile</span><br><span class="line">mkswap /swapfile</span><br><span class="line">swapon /swapfile</span><br></pre></td></tr></table></figure><h4 id="确认swap是否启用"><a href="#确认swap是否启用" class="headerlink" title="确认swap是否启用"></a>确认swap是否启用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><h4 id="让-Swap-在重启后仍然生效"><a href="#让-Swap-在重启后仍然生效" class="headerlink" title="让 Swap 在重启后仍然生效"></a>让 Swap 在重启后仍然生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;/swapfile swap swap defaults 0 0&#x27; &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure><h4 id="附：启动容器的指令"><a href="#附：启动容器的指令" class="headerlink" title="附：启动容器的指令"></a>附：启动容器的指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --memory=&quot;2g&quot; --memory-swap=&quot;2g&quot; -p 8080:8080 \</span><br><span class="line">    -v /root/pml/pml-admin.jar:/app/pml-admin.jar \</span><br><span class="line">    --name pml pml-admin \</span><br><span class="line">    java -Xms512m -Xmx2g -XX:+PrintFlagsFinal -jar /app/pml-admin.jar</span><br></pre></td></tr></table></figure><p><em>当出现oom时生成dump日志</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapdump.hprof</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepseek</title>
      <link href="/post/bc9a4dc7.html"/>
      <url>/post/bc9a4dc7.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"></div>]]></content>
      
      
      <categories>
          
          <category> java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装nextcloud</title>
      <link href="/post/db544ad0.html"/>
      <url>/post/db544ad0.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="nextcloud介绍"><a href="#nextcloud介绍" class="headerlink" title="nextcloud介绍"></a>nextcloud介绍</h2><p><em>Nextcloud是一款开源免费的私有云存储网盘项目，可以让你快速便捷地搭建一套属于自己或团队的云同步网盘，从而实现跨平台跨设备文件同步、共享、版本控制、团队协作等功能。Nextcloud是一个网盘式文件管理系统，多用户权限管理，多客户端，使用简单。</em>  </p><p><em>Nextcloud是owncloud的一个分支，由原创始人团队维护，是在owncloud被别的公司收购后，由创始人团队创立的新分支。就像 mysql和mariadb。</em>  </p><p><em>Nextcloud完全开源，功能强大，能够自由更改主题，无限制增加用户，有一个完善的应用中心（在线office办公，pdf在线浏览，图片缩略图浏览等功能）</em></p><h2 id="如何安装nextcloud"><a href="#如何安装nextcloud" class="headerlink" title="如何安装nextcloud"></a>如何安装nextcloud</h2><h3 id="安装php8-1"><a href="#安装php8-1" class="headerlink" title="安装php8.1"></a>安装php8.1</h3><h4 id="检查旧版的php版本"><a href="#检查旧版的php版本" class="headerlink" title="检查旧版的php版本"></a>检查旧版的php版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查当前php版本或者 php -m 检查当前php扩展</span></span><br><span class="line">php -v #检查当前的php版本</span><br><span class="line">php -m #检查php扩展</span><br></pre></td></tr></table></figure><h4 id="卸载所有已安装的php"><a href="#卸载所有已安装的php" class="headerlink" title="卸载所有已安装的php"></a>卸载所有已安装的php</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y php*</span><br></pre></td></tr></table></figure><h4 id="添加remi源（可能需要提前安装epel-release）"><a href="#添加remi源（可能需要提前安装epel-release）" class="headerlink" title="添加remi源（可能需要提前安装epel-release）"></a>添加remi源（可能需要提前安装epel-release）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y https://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">rpm -Uvh https://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br></pre></td></tr></table></figure><h4 id="单独启动php81的源（需要提前安装yum-utils以确保yum-config-manager命令顺利运行）"><a href="#单独启动php81的源（需要提前安装yum-utils以确保yum-config-manager命令顺利运行）" class="headerlink" title="单独启动php81的源（需要提前安装yum-utils以确保yum-config-manager命令顺利运行）"></a>单独启动php81的源（需要提前安装yum-utils以确保yum-config-manager命令顺利运行）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --disable &#x27;remi-php*&#x27;</span><br><span class="line">yum-config-manager --enable remi-php81</span><br></pre></td></tr></table></figure><p> <em>若出现 -bash:yum-config-manager:未找到命令</em><br> <em>是因为没有安装过yum-utils</em><br> <em>解决方法：</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h4 id="安装php及其扩展"><a href="#安装php及其扩展" class="headerlink" title="安装php及其扩展"></a>安装php及其扩展</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y  php php-bcmath php-cli php-common php-devel php-fpm php-gd php-intl php-ldap php-mbstring php-mysqlnd php-odbc php-pdo php-pear php-pecl-xmlrpc php-pecl-zip php-process php-snmp php-soap php-sodium php-xml</span><br></pre></td></tr></table></figure><p> <em>在安装的过程中要仔细检查每一个php扩展是否安装成功，如果有安装不成功的扩展需要及时重装。如果没有及时重装可能会导致服务器内部错误。</em><br> <em>如果php-mysqlnd提示安装失败，换个源试试，php-mysqlnd没装上web安装必失败。</em><br><em>安装完成，查看php版本</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure><p> <em>php命令</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status php-fpm    #查看php状态</span><br><span class="line">systemctl start php-fpm     #启动php</span><br><span class="line">systemctl stop php-fpm      #停止php</span><br><span class="line">systemctl restart php-fpm   #重启php</span><br><span class="line">systemctl enable php-fpm    #配置php自启动</span><br></pre></td></tr></table></figure><h3 id="apache服务器安装"><a href="#apache服务器安装" class="headerlink" title="apache服务器安装"></a>apache服务器安装</h3><h4 id="检查是否有旧版本的apache（也可以不检查直接装）"><a href="#检查是否有旧版本的apache（也可以不检查直接装）" class="headerlink" title="检查是否有旧版本的apache（也可以不检查直接装）"></a>检查是否有旧版本的apache（也可以不检查直接装）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep httpd</span><br></pre></td></tr></table></figure><p> <em>会返回一个版本号</em></p><h4 id="卸载旧版本，安装新版本"><a href="#卸载旧版本，安装新版本" class="headerlink" title="卸载旧版本，安装新版本"></a>卸载旧版本，安装新版本</h4><p> <em>卸载旧版本</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove httpd*</span><br></pre></td></tr></table></figure><p> <em>安装新版本</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd</span><br></pre></td></tr></table></figure><h4 id="安装完成后检查apache状态"><a href="#安装完成后检查apache状态" class="headerlink" title="安装完成后检查apache状态"></a>安装完成后检查apache状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep httpd    #检查apache软件版本</span><br><span class="line">ps -ef | grep apache    #检查apache进程</span><br></pre></td></tr></table></figure><h4 id="apache服务指令"><a href="#apache服务指令" class="headerlink" title="apache服务指令"></a>apache服务指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status httpd      #查看apache状态</span><br><span class="line">systemctl start httpd       #启动apache</span><br><span class="line">systemctl stop httpd        #停止apache</span><br><span class="line">systemctl restart httpd     #重启apache</span><br><span class="line">system enable httpd         #开机自启apache</span><br></pre></td></tr></table></figure><p><em>如果本地访问，就已经大功告成了，如果在别的主机上访问，就需要开启CentOS 7的80端口</em></p><h4 id="开放CentOS-7的80端口，配置防火墙相关命令"><a href="#开放CentOS-7的80端口，配置防火墙相关命令" class="headerlink" title="开放CentOS 7的80端口，配置防火墙相关命令"></a>开放CentOS 7的80端口，配置防火墙相关命令</h4><p><em>如果嫌麻烦可以直接放行所有端口，但是这样做不安全</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p> <em>也可以只放行80端口，这样是比较保守的选择</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent </span><br><span class="line">firewall-cmd --reload           #重新加载让刚才的命令生效</span><br><span class="line">firewall-cmd --list-ports       #看一下生效了没</span><br></pre></td></tr></table></figure><p><em>到这里apache就算安装完成了，接下来可以访问一下ip看看效果</em></p><p><em>如果出现大大的“testing 123…”就是成功了</em></p><h3 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h3><h4 id="卸载MariaDB"><a href="#卸载MariaDB" class="headerlink" title="卸载MariaDB"></a>卸载MariaDB</h4><p><em>由于本文用到的环境是CentOS 7，所以系统中有自带的MariaDB数据库，在这里先将MariaDB卸载，然后安装 Mysql</em></p><p><em>首先，检查是否安装了MariaDB</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mariadb</span><br></pre></td></tr></table></figure><p>如果已经安装了MariaDB，进行卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</span><br></pre></td></tr></table></figure><p><em>这里的MariaDB版本是我本地的版本，如果不知道自己的数据库版本可以按TAB键自动补全</em></p><h4 id="下载MySQL仓库并安装"><a href="#下载MySQL仓库并安装" class="headerlink" title="下载MySQL仓库并安装"></a>下载MySQL仓库并安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure><p> <em>若提示wget未找到命令，先安装wget</em></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><p> <em>安装好后，安装mysql仓库</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure><p> <em>运行下面的命令安装GPG，不安装的话用yum安装mysql会报错</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure><h4 id="安装MySQL数据库-1"><a href="#安装MySQL数据库-1" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-servic</span><br></pre></td></tr></table></figure><p> <em>开启MySQL数据库，检查数据库状态</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld      #启动MySQL</span><br><span class="line">systemctl status mysqld     #查看MySQL状态（MySQL经常抽风，这条命令很常用）</span><br></pre></td></tr></table></figure><h4 id="查看MySQL的默认密码，登录并修改默认密码"><a href="#查看MySQL的默认密码，登录并修改默认密码" class="headerlink" title="查看MySQL的默认密码，登录并修改默认密码"></a>查看MySQL的默认密码，登录并修改默认密码</h4><p><em>查看默认密码</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/mysqld.log |grep password</span><br></pre></td></tr></table></figure><p> <em>因为是首次登录MySQL，所以需要先查看MySQL默认的root密码，然后用默认密码登录root账户，在首次登录root账户后会被MySQL强制要求修改密码。</em><br> <em>登录MySQL</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p> <em>回车之后会弹出“password:”输入默认密码登录即可</em><br><em>修改默认密码</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;nextcloud@admin2023&#x27;;      #注意分号</span><br></pre></td></tr></table></figure><p> <em>这个密码其实是不符合MySQL密码规则的，MySQL要求必须有大小写和特殊符号</em></p><p> <em>如果你想设置一个弱密码，可以用这条代码查看密码策略</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW variables LIKE &#x27;validatej_password%&#x27;;</span><br></pre></td></tr></table></figure><p> <em>查看过后可以修改成我们想要设置的样子</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password.policy=0;</span><br><span class="line">set global validate_password.length=4;</span><br></pre></td></tr></table></figure><p> <em>这样设置过后我们的密码就变成最少4位并且没有限制了</em></p><h3 id="配置数据库、表及用户权限"><a href="#配置数据库、表及用户权限" class="headerlink" title="配置数据库、表及用户权限"></a>配置数据库、表及用户权限</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><em>创建一个名为nextclouddate的数据库，你也可以起一个别的名字。但是一定要记住，在安装的时候要用到！！！切记！！！</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE nextclouddate; </span><br></pre></td></tr></table></figure><h4 id="进入刚创建的数据库"><a href="#进入刚创建的数据库" class="headerlink" title="进入刚创建的数据库"></a>进入刚创建的数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use nextclouddate;</span><br></pre></td></tr></table></figure><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE user &#x27;username&#x27;@&#x27;localhost&#x27; identified by &#x27;Password@2023&#x27;</span><br></pre></td></tr></table></figure><p> <em>其中‘username’表示用户名，‘Password@2023’表示密码。‘localhost’表示只能本地访问，可以根据需求修改</em><br> <em>在安装nextcloud时同样需要用到现在创建的用户，所以一定记住设置的用户名和密码！</em></p><h4 id="为用户授权"><a href="#为用户授权" class="headerlink" title="为用户授权"></a>为用户授权</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON nextclouddate.* TO &#x27;username&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p><em>这一步同样至关重要，是给刚创建的用户授予所有权限，如果没授予成功一定检查哪里出了问题。</em></p><p> <em>如果创建的用户没有权限的话，web安装时会出现无法连接MySQL报错  如果出现上述错误，可以参考nextcloud官网上的解决方法，链接如下：nextcloud官方论坛解决方法</em></p><h3 id="nextcloud安装与配置"><a href="#nextcloud安装与配置" class="headerlink" title="nextcloud安装与配置"></a>nextcloud安装与配置</h3><h4 id="获取nextcloud安装包"><a href="#获取nextcloud安装包" class="headerlink" title="获取nextcloud安装包"></a>获取nextcloud安装包</h4><p><em>使用wget下载nextcloud最新版安装包</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.nextcloud.com/server/releases/nextcloud-24.0.5.zip</span><br></pre></td></tr></table></figure><h4 id="解压并转移到对应文件夹下"><a href="#解压并转移到对应文件夹下" class="headerlink" title="解压并转移到对应文件夹下"></a>解压并转移到对应文件夹下</h4><p> <em>网上看了很多安装教程并没有写nextcloud的文件要放在哪个路径下，对于小白来讲很不友好，所以这里说明一下路径</em></p><p> <em>事实上nextcloud要解压到var&#x2F;www&#x2F;html这个文件夹下，这里我们在根目录下解压，然后把文件转移到这个位置</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y unzip        #安装unzip用来解压文件</span><br><span class="line">unzip nextcloud-24.0.5.zip             #解压上面下载的zip文件</span><br><span class="line">cd /root/nextcloud          #进入解压后的文件夹</span><br><span class="line">scp -r * /var/www/html      #把文件夹下的全部内容转移到目标文件夹下</span><br></pre></td></tr></table></figure><p> <em>老规矩，如果有未找到命令的报错，就安装一下</em><br> <em>安装命令 yum -y install ‘名称’</em></p><h4 id="给nextcloud文件权限"><a href="#给nextcloud文件权限" class="headerlink" title="给nextcloud文件权限"></a>给nextcloud文件权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R apache:apache /var/www/html        #把这一文件下的子文件、子目录的所有者设为apache用户</span><br><span class="line">chmod -R 775 /var/www/html                  #赋予775权限</span><br></pre></td></tr></table></figure><p><em>这两步骤如果不操作的话在web安装的时候会出现服务器内部错误，如果安装的时候发现有类似的情况要检查一下权限给没给</em></p><p><em>检查权限是否正确的方法</em></p><p> <em>进入 &#x2F;var&#x2F;www&#x2F;html目录下</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br></pre></td></tr></table></figure><p><em>这样就可以看到文件的权限以及是否为apache用户</em></p><h4 id="关闭ESLinux"><a href="#关闭ESLinux" class="headerlink" title="关闭ESLinux"></a>关闭ESLinux</h4><p><em>还是那句话，目前大多数的教程都是基于docker安装nextcloud，在为数不多不用docker部署的文章中，99%都没有提到要禁用ESLinux，但如果不禁用他的话就会导致网页无法正常显示</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vim</span><br><span class="line">vim /etc/selinux/config     #编辑selinux配置文件</span><br></pre></td></tr></table></figure><p><em>进去之后按i编辑，然后找到SELINUX的那一行</em><br><em>SELINUX&#x3D;disbabled           #把等号删掉，改为disabled</em></p><h3 id="进入nextcloud前端配置页面"><a href="#进入nextcloud前端配置页面" class="headerlink" title="进入nextcloud前端配置页面"></a>进入nextcloud前端配置页面</h3><p><em>根据本文的配置，对应输入就可以安装成功了！</em></p><p><em>安装成功！</em></p></div>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何其他电脑上继续编写博客</title>
      <link href="/post/fac5c62e.html"/>
      <url>/post/fac5c62e.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="4ec7b0609990db6c812ae3301da366bb39767657a25af658471f3a5b0ba905dc">6031008eaf30dfa9f6cee48a6a69006edb8dc1fdbbefc179c3a1576dffe64c361fd855167a4155221dff1d7c4b3c3a03fc9c408430d389fef2769d6b6b2db7228432cb45d5345bc1f8dee9ae7de79a3193d349746f963b65d8bdbfdd8516fdf00279b30f24582a3c50ecd54a4362c174c9b35500e175c0a6711282559f2f9e4a24fcfa3b9f414578fa6441db1192f0cd0fba631f68349931e3d1c97789908cc6c90c7187bbc9d6cfd0a46886fc1ffce3ed50902b62c1cf99eff673deae641dca1f6ffcb98ea3f61198a55823092ad85e4ee7fe4776fd4d25709d33ae0250fb8760202b0d4eb3bbc90f8cd5eb0c8a366b7884dd1c58c34fbdea5c04a9eaf5c963e8805764d867d4edf88e6dc602bcfcff2400af1c4ee24d19310725706fbd0c40cf0cdc60bcd2f8950ecba589e84910a4ae86412f1ad7eb2b844dc0f85425c95dc2db44680bb0fc18fa6d364c2622dbfa0cd7ec52d361992bafd52f9c4993b1e826499a2d6063d74c9cbd1b921f89b3a4bad7561388c140dabc78e7e360535d63f7308e3a23559871053d5a0d2b28c24f623e6d0d1e36b4b5bf871449dc61273c770036b56c119381c73d48526015801c1729c21d3d4b1aea601c3b125b79c94ccce0b29cd6e2d3a704c9f8dea2dd94ac8e6104a9a1da130349bd293f487614914b9ef5e40c1ee0994584b8f176e147049be8b79754886980179200bfe6cb72dad9934fda2c6222783a5c068f8ab3edf8e6a029a691bbb054d6203933cc7e829d49762dce7563b0cb6876ea08b907dc0dd29960a02c5a2a077aaae4346e493668b975dcb6fedc29ab2f54c957f5eb60b9eaecc180e07ef483b293d115b254725f891976e0e4fa2b2a6d235d6cb0e2efd66741b44d8756d7f34707ccca1443578be527a7acbfc32cec240be1f78af1910c4a87a92c75ede7eeed5cbb1bed82584ebc07e07d1a34e14c9bf2cfd33f44520151c2e992ff8a7d4292980fe6d46fb63a9c2744c0278626cc65b10b31c963872f89d1945a458018d1e078fa2808ac7c2b5479d3ee3d8e233b4cc5c032ed3d26257e1cdbf4b8ade8712b59c085a55809409387d33257c6db9979d96335d59d0eae3dc4dc2d5920595ff554183f46a0786034a73aebf0bdfb00a2be40e78260b4bd505f5949addbf8730dc467b375d2eefc3350186e517297f18cdddbfafcde33ff6776fef85ac108fde6cb5b4a6f8ac08238da5ecd6e3fe5a61bf58ea8f678fd00d1854a73ba2e4fcc868fc3c8d4f8770082430f9f00c5da4d7c307cba63c00d0bfdb466570d39c008ffd9b112ed862f54b0420689b622256b1b94f49ebcc7bc455be12acb9c0b5a53b3f6358770deaaa853e917673f5ac7805033cbdc35a0e4bcf0edcd3d73eec7a8c07efcbc88ae6540233cbc4ee02393e3f1400aa63fd2bc70f1618b84ace0644326c3ad93e0ce8746d3887129ff54e7058c38b259f44f286e2e9b17ca7848bd441f83915fd8804783c7721ebfc5b1631a0a214945cd63d3d0aa1b68e3daa9c184220f302c42bdaca27d2cd4ac082bbafe8b315409313a0c623ff79945bbf60a43be357ea19ed3567e55013f3c71b23d4adcec209ad71a414b151f7da755c72bf38153d2de4726ca94dac61177d93056051ac4642691746fb2a50b5700f8850df129e31a01db9c2bd76a7d4f28c5be955df204eb40b7f23e54c85309455efd647b64b4d82821adda6d39972c69ef399fc68d0c3497e1c0ab63bea73aff68973d9258f897a67e7cec1adff1a22f41e90094511b732f9a191968cbe61fe52913aa6c8b3a1293c57231362e0a35745cfa1aa78e617c1a42a863d03c4b8fd83df1a655d5745a7d049d8f27bbeec54e113e96cfa45914da25aadd5b59a33f9a00b4fed93786d7ac4c0651eac2470c05cc77aa6d9a670f9f2c3fa36eb740d583137b4138ad29239c7b007c923873b9469c329c9afb13f0d6d553d203f79203d189af6898c6c7910ea94a752da4cdc090fd86d69065ec8c9e0a91afa9e9d315a58e58a90f07f5ed4acd0b7637b53b0a48424172db6d5d43817302cc683d425c5bb4c504b73bfa3713f89bf6f058eec08b2dd8963031bc617a7632d4b1932360c586e86a5f6be4396cd3bcac7c95b2d94338acd3da5054a61d51b27abc884121d2208113bea0e0c355b94eedb299a1ec16276ca1031748455b63dd4f6ddb08be43c9b4f0cb53fbb37a4cbd12e598ef105a683b91c9a85e88bce7dda92b7cff0b6bd40074ae004334033f52524f47a07841828c505e96e4b7a961f5bf4f37ce4517eb17ddede541d047959e52a7c2bd5a5acea5179aacd0e3221ee76fe9450fa035148973b101f8225cca7b719c02c0817b676778c60849cbb3e7fc6e7f82bdba401094d2f197cca1491cb2db14</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch学习</title>
      <link href="/post/d2d9ea24.html"/>
      <url>/post/d2d9ea24.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><ul><li><font color=#FF000><em><strong>重要：<u>安装es，ram至少要2G,如果加logstash连接数据库，还要再加内存，4G起</u></strong></em></font></li></ul><h2 id="安装es和kibana"><a href="#安装es和kibana" class="headerlink" title="安装es和kibana"></a>安装es和kibana</h2><p><em>重要：建立docker网络，因为es和kibana要连接</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create elastic</span><br></pre></td></tr></table></figure><p><em>安装es</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.17.9</span><br><span class="line">docker run -d --name es01-test --net elastic -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.17.9</span><br></pre></td></tr></table></figure><p><em>安装kibana</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/kibana/kibana:7.17.9</span><br><span class="line">docker run -d  --name kib01-test --net elastic -p 5601:5601 -e &quot;ELASTICSEARCH_HOSTS=http://es01-test:9200&quot; docker.elastic.co/kibana/kibana:7.17.9</span><br></pre></td></tr></table></figure><h2 id="kibana改中文"><a href="#kibana改中文" class="headerlink" title="kibana改中文"></a>kibana改中文</h2><p><em>把docker的文件复制出来到data路径下</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp kib01-test:/usr/share/kibana/config/kibana.yml /data</span><br></pre></td></tr></table></figure><p><em>在文件中添加添加一行配置<code>i18n.locale: &quot;zh-CN&quot;</code></em></p><p><img src="/img/kibana%E4%B8%AD%E6%96%87%E5%8C%96.png" alt="kibana中文化" title="kibana中文化"></p><p><em>然后把修改的文件粘贴回去</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /data/kibana.yml kib01-test:/usr/share/kibana/config/</span><br></pre></td></tr></table></figure><p><em>拉取logstash镜像，版本要和es，kibana一致</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull logstash:7.17.9</span><br></pre></td></tr></table></figure><p><em><a href="https://downloads.mysql.com/archives/c-j/">下载</a> mysql connect文件,解压后将jar文件复制到data目录下</em></p><p><em>写logstash.conf文件</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  jdbc &#123;</span><br><span class="line">    jdbc_connection_string =&gt; &quot;jdbc:mysql://172.17.0.5:3306/test&quot;</span><br><span class="line">    jdbc_user =&gt; &quot;root&quot;</span><br><span class="line">    jdbc_password =&gt; &quot;123456&quot;</span><br><span class="line">    jdbc_driver_library =&gt; &quot;/usr/share/logstash/mysql-connector-java-8.0.27.jar&quot;</span><br><span class="line">    jdbc_driver_class =&gt; &quot;com.mysql.cj.jdbc.Driver&quot; # 8.x版本的驱动类名</span><br><span class="line">    # jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;  # 5.x 版本的驱动类名</span><br><span class="line"></span><br><span class="line">    jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class="line">    jdbc_fetch_size =&gt; &quot;2000&quot; # 每次查2000后即插入ES，避免OOM</span><br><span class="line">    jdbc_page_size =&gt; &quot;2000&quot;</span><br><span class="line"></span><br><span class="line">    # 这里类似crontab(但不完全是，还是有区别的)，可以定制定时操作，比如每10分钟执行一次同步</span><br><span class="line">    schedule =&gt; &quot;0 */10 * * * *&quot;  # 每10分钟运行一次。注意频率不要太高</span><br><span class="line"></span><br><span class="line">    # mysql文件, 也可以直接写SQL语句在此处，如下：</span><br><span class="line">    # statement_filepath =&gt; &quot;/usr/share/logstash/mysql/mysql-to-es.sql&quot;</span><br><span class="line">    statement =&gt; &quot;SELECT</span><br><span class="line">* </span><br><span class="line">FROM</span><br><span class="line">user202405&quot;</span><br><span class="line"></span><br><span class="line">    # 是否将字段名转换为小写，默认true（如果有数据序列化、反序列化需求，建议改为false）</span><br><span class="line">    lowercase_column_names =&gt; false</span><br><span class="line">    # 处理中文乱码问题</span><br><span class="line">    codec =&gt; plain &#123; charset =&gt; &quot;UTF-8&quot; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;http://172.17.0.2:9200&quot;]</span><br><span class="line">    index =&gt; &quot;%&#123;user_index&#125;&quot;</span><br><span class="line">    document_id =&gt; &quot;%&#123;user_id&#125;&quot;</span><br><span class="line">    user =&gt; &quot;elastic&quot;</span><br><span class="line">    password =&gt; &quot;123456&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>input</code> 部分具体参数说明：</p><ul><li><code>jdbc_connection_string</code>：JDBC 连接字符串，用于连接 MySQL 数据库。这里指定了 IP 地址 172.17.0.5(注意这里是 Docker 内部 IP，可通过 <code>docker inspect container_id</code> 命令查看 Docker 内部 IP)。</li><li><code>jdbc_user</code>：连接数据库的用户名。</li><li><code>jdbc_password</code>：连接数据库的密码。</li><li><code>jdbc_driver_library</code>：指定 JDBC 驱动的 jar 文件路径。</li><li><code>jdbc_driver_class</code>：JDBC 驱动类，这里使用的是 <code>com.mysql.cj.jdbc.Driver</code>。</li><li><code>jdbc_paging_enabled</code>：启用分页查询，这里设置为 <code>true</code>。</li><li><code>jdbc_fetch_size</code>：每次查询返回的数据量，这里设置为 2000，以避免内存溢出(OOM)。</li><li><code>jdbc_page_size</code>：每页查询的数据量，这里设置为 2000。</li><li><code>schedule</code>：定时任务的调度设置，类似于 Crontab 表达式。</li><li><code>statement</code>：SQL查询语句(也可以使用 <code>statement_filepath</code> 指定 SQL 文件的地址)。</li><li><code>lowercase_column_names</code>：是否将字段名转换为小写，这里设置为 false。</li><li><code>codec</code>：指定字符编码，这里设置为 <code>UTF-8</code>，以处理中文乱码问题。</li></ul><p><code>output</code> 部分具体参数说明：</p><ul><li><code>hosts</code>：Elasticsearch 集群的地址。</li><li><strong><code>index</code>：指定 Elasticsearch 索引的名称，这里使用了动态索引名 <code>%&#123;user_index&#125;</code>，表示根据 MySQL 数据表中的 <code>user_index</code> 字段来决定索引名称。</strong></li><li><strong><code>document_id</code>：指定 Elasticsearch 文档的 ID，这里使用了动态ID <code>%&#123;user_id&#125;</code>，表示根据 MySQL 数据表中的 <code>user_id</code> 字段来决定文档 ID。</strong></li><li><code>user</code>：连接 Elasticsearch 的用户名(如果 Elasticsearch 没有设置，这个配置项可为空)。</li><li><code>password</code>：连接 Elasticsearch 的密码(如果 Elasticsearch 没有设置，这个配置项可为空)。</li></ul><p><em>创建容器并启动</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /home/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf \</span><br><span class="line">  -v /home/logstash/mysql-connector-j-9.0.0.jar:/usr/share/logstash/mysql-connector-j-9.0.0.jar \</span><br><span class="line">  --name logstash:7.17.9 logstash:7.17.9</span><br></pre></td></tr></table></figure><p><font color=#FF000><em><strong><u>我服务器ram太小，等扩容后再验证</u></strong></em></font></p></div>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护若依项目</title>
      <link href="/post/408ec80b.html"/>
      <url>/post/408ec80b.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="更新容器步骤"><a href="#更新容器步骤" class="headerlink" title="更新容器步骤"></a>更新容器步骤</h2><p><em>进入容器查看jar包的位置</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container&gt; /bin/bash</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><em>可以将jar包同步到容器内的文件</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cd</span>到jar包相同目录#</span></span><br><span class="line">docker cp ruoyi-admin.jar &lt;container&gt;:/app/ruoyi-admin.jar</span><br></pre></td></tr></table></figure><h2 id="进程占用的处理"><a href="#进程占用的处理" class="headerlink" title="进程占用的处理"></a>进程占用的处理</h2><p><em>安装isof</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install lsof</span><br></pre></td></tr></table></figure><p><em>查找是什么进程占用了端口,并获取pid</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :&lt;port&gt;</span><br></pre></td></tr></table></figure><p><em>强制杀死进程</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill -9 &lt;PID&gt;</span><br></pre></td></tr></table></figure><h2 id="nginx开机启动设置"><a href="#nginx开机启动设置" class="headerlink" title="nginx开机启动设置"></a>nginx开机启动设置</h2><p><em>查看nginx是否是开机启动</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl is-enabled nginx</span><br><span class="line">- disabled是未开机启动</span><br><span class="line">- disabled是已经设置了开机启动</span><br></pre></td></tr></table></figure><p><em>设置开机启动</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure><h2 id="给docker设置开机启动"><a href="#给docker设置开机启动" class="headerlink" title="给docker设置开机启动"></a>给docker设置开机启动</h2><p><em>如果容器已经创建，先删除容器</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f &lt;container&gt;</span><br></pre></td></tr></table></figure><p><em>然后创建开机启动的容器</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name &lt;container-name&gt; --restart always -p &lt;port&gt;:80 &lt;image-name&gt;</span><br></pre></td></tr></table></figure><h2 id="进入docker容器的指令"><a href="#进入docker容器的指令" class="headerlink" title="进入docker容器的指令"></a>进入docker容器的指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it my_container /bin/bash</span><br></pre></td></tr></table></figure><h2 id="调整docker堆栈内存"><a href="#调整docker堆栈内存" class="headerlink" title="调整docker堆栈内存"></a>调整docker堆栈内存</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-Xms512m&quot;, &quot;-Xmx2g&quot;, &quot;-XX:+UseContainerSupport&quot;, &quot;-jar&quot;, &quot;/app/pml-admin.jar&quot;] #修改镜像文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --memory=&quot;2g&quot; --memory-swap=&quot;2g&quot; -p 8080:8080 \</span><br><span class="line">    -v /root/pml/pml-admin.jar:/app/pml-admin.jar \</span><br><span class="line">    --name pml pml-admin \</span><br><span class="line">    java -Xms512m -Xmx2g -XX:+PrintFlagsFinal -jar /app/pml-admin.jar # 强制 JVM 使用容器内存</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中stream的使用</title>
      <link href="/post/f5d1a12e.html"/>
      <url>/post/f5d1a12e.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="Java中stream的使用"><a href="#Java中stream的使用" class="headerlink" title="Java中stream的使用"></a>Java中stream的使用</h2><h3 id="String集合转Long类型后，需要boxed，再转集合"><a href="#String集合转Long类型后，需要boxed，再转集合" class="headerlink" title="String集合转Long类型后，需要boxed，再转集合"></a>String集合转Long类型后，需要boxed，再转集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; dictValues = sysDictDatas.stream()</span><br><span class="line">                                    .map(SysDictData::getDictValue)</span><br><span class="line">                                    .mapToLong(Long::parseLong)</span><br><span class="line">                                    .boxed() # 将 LongStream 转换为 Stream&lt;Long&gt;</span><br><span class="line">                                    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">百度</a></p></div>]]></content>
      
      
      <categories>
          
          <category> java,steam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发的处理</title>
      <link href="/post/97c26f6a.html"/>
      <url>/post/97c26f6a.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="行锁的实现"><a href="#行锁的实现" class="headerlink" title="行锁的实现"></a>行锁的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先查询设备并加锁</span></span><br><span class="line"><span class="type">PmlDevice</span> <span class="variable">device</span> <span class="operator">=</span> pmlDeviceMapper.selectByIdForUpdate(pmlDeviceDto.getDeviceNo());</span><br><span class="line"><span class="keyword">if</span> (device == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理设备不存在的情况</span></span><br><span class="line">    <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;第&quot;</span>+a+<span class="string">&quot;行设备不存在,请确认后重新导入!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新设备信息  </span></span><br><span class="line">device.setDealerUserId(pmlDeviceDto.getDealerUserId());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByIdForUpdate&quot;</span> resultType=<span class="string">&quot;com.pml.domain.PmlDevice&quot;</span>&gt;</span><br><span class="line">    SELECT * FROM pml_device <span class="type">WHERE</span> <span class="variable">device_no</span> <span class="operator">=</span> #&#123;deviceNo&#125; FOR UPDATE</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>​      <em>添加时机：在select … for update 语句时给查询到的记录添加一个排他锁（也称为行锁或写锁），以防止其他事务对同一行数据进行修改</em></p><p>​      <em>释放时机：行锁通常在当前事务结束时自动释放。事务可以通过以下几种方式结束：<br>提交事务：如果事务成功完成所有操作并且调用了提交方法（例如 transactionManager.commit()），行锁会被释放。<br>回滚事务：如果事务过程中发生了错误并且调用了回滚方法（例如 transactionManager.rollback()），行锁也会被释放。</em></p><p>​      <em>在Java中，如果你使用的是Spring框架，事务管理通常是通过注解（如 @Transactional）来实现的。在这种情况下，事务的边界由方法的开始和结束决定。因此，行锁会在方法返回时（无论是正常返回还是抛出异常）被释放。</em></p><hr><h2 id="表锁的实现"><a href="#表锁的实现" class="headerlink" title="表锁的实现"></a>表锁的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">LOCK TABLES devices WRITE;</span><br><span class="line">-- 执行更新操作</span><br><span class="line">UPDATE devices <span class="type">SET</span> <span class="variable">dealer_user_id</span> <span class="operator">=</span> <span class="string">&#x27;new_user_id&#x27;</span> <span class="type">WHERE</span> <span class="variable">device_no</span> <span class="operator">=</span> <span class="string">&#x27;device_no&#x27;</span>;</span><br><span class="line">-- 释放表锁</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p><em>表锁会显著降低并发性能，因为它们会阻止其他事务对表的访问</em></p><p><em>不当使用表锁可能导致死锁，特别是在复杂的事务环境中</em></p><p><em>确保在事务中正确地添加和释放表锁，以避免锁泄漏</em></p><p><em>如果你需要在应用程序中实现表锁，建议根据具体的数据库系统选择合适的语法和方法。同时，尽量减少表锁的使用，转而使用更细粒度的行锁来提高并发性能。</em></p></div>]]></content>
      
      
      <categories>
          
          <category> java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依项目的首次部署</title>
      <link href="/post/b4780c00.html"/>
      <url>/post/b4780c00.html</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p><em>检查是否安装过mysql</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><p><em>如果你系统有安装，那可以选择进行卸载</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mysql　# 普通删除模式</span><br><span class="line">rpm -e --nodeps mysql　　# 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</span><br></pre></td></tr></table></figure><p><em>安装mysql</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install wget</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 wget 下载 MySQL 仓库的 RPM 包</span></span><br><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装下载的 RPM 包</span></span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum update</span><br><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure><p><em>权限设置</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql /var/lib/mysql/</span><br></pre></td></tr></table></figure><p><em>创建并切换到 mysql 用户</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 如果已经创建跳过前两步</span><br><span class="line">sudo useradd mysql </span><br><span class="line">sudo passwd mysql</span><br><span class="line">su - mysql //以mysql身份进入bash模式</span><br></pre></td></tr></table></figure><p><em>初始化 MySQL</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize</span><br><span class="line">exit //退出bash模式</span><br></pre></td></tr></table></figure><p><em>启动 MySQL</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p><em>查看MySQL启动状态</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p><em>验证 MySQL 安装</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出类似于：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysqladmin  Ver 8.42 Distrib 5.6.51, <span class="keyword">for</span> Linux on x86_64</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">就是安装正常</span></span><br></pre></td></tr></table></figure><p><em>设置root用户的密码</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password &quot;123456&quot;</span><br></pre></td></tr></table></figure><p><em>登录mysql服务器</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">[root@host]# </span><span class="language-bash">mysql -u root -p</span></span><br><span class="line">Enter password:*******</span><br></pre></td></tr></table></figure><p><em>设置mysql的访问权限</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置只能从一个ip访问mysql</span></span><br><span class="line">CREATE USER &#x27;root&#x27;@&#x27;115.195.63.179&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;115.195.63.179&#x27; WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置可以从任何ip访问mysql</span></span><br><span class="line">CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><hr><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p><em>卸载Docker</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><p><em>安装docker</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p><em>更新本地镜像</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改默认镜像源</span></span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 YUM 软件包缓存</span></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p><em>安装docker</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p><em>关闭防火墙</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止开机启动防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p><em>通过命令启动docker</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker  # 启动docker服务</span><br><span class="line">systemctl stop docker  # 停止docker服务</span><br><span class="line">systemctl restart docker  # 重启docker服务</span><br></pre></td></tr></table></figure><p><em>输入命令，可以查看docker版本</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v # 出现版本才是成功</span><br></pre></td></tr></table></figure><hr><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><p><em>拉取官方的最新版本的镜像</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p><em>使用以下命令来查看是否已安装了 redis</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><em>安装完成后，我们可以使用以下命令来运行 redis 容器</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-test -p 6379:6379 redis</span><br></pre></td></tr></table></figure><hr><h2 id="后端项目部署"><a href="#后端项目部署" class="headerlink" title="后端项目部署"></a>后端项目部署</h2><h3 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h3><p><em>编写Dockerfile</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用官方的 Java 运行时作为父镜像</span></span><br><span class="line"> FROM openjdk:17</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">设置工作目录</span></span><br><span class="line"> WORKDIR /app</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">将构建好的 JAR 文件复制到容器中</span></span><br><span class="line"> COPY ruoyi-admin.jar /app/ruoyi-admin.jar</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">暴露应用的端口</span></span><br><span class="line"> EXPOSE 8080</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">定义环境变量</span></span><br><span class="line"> ENV JAVA_OPTS=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">启动应用</span></span><br><span class="line"> ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;ruoyi-admin.jar&quot;]</span><br></pre></td></tr></table></figure><p><em>跳转到jar包目录下</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/ruoyi-project/backend</span><br></pre></td></tr></table></figure><p><em>docker部署</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myapp .</span><br><span class="line">docker run -d -p 7072:8080 -v /root/ruoyi-project/backend/ruoyi-admin.jar:/app/ruoyi-admin.jar --name myapp-container myapp # 运行在7072端口</span><br></pre></td></tr></table></figure><h3 id="docker-compose部署"><a href="#docker-compose部署" class="headerlink" title="docker compose部署"></a>docker compose部署</h3><p><em>安装docker compose</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><em>将可执行权限应用于二进制文件</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><em>添加docker-compose.yml文件</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  myapp:</span><br><span class="line">    image: myapp</span><br><span class="line">    container_name: myapp-container</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9111:9111&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/ruoyi-backend/ruoyi-admin.jar:/app/ruoyi-admin.jar</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><p><em>运行docker compose</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><hr><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p><em>前端打包项目</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><em>安装Nginx</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><p><em>配置前端转发</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/etc/nginx/conf.d中添加vue.conf文件</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name vue.fengsy.top;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/dist;</span><br><span class="line"> index index.html index.htm;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"> location /prod-api/ &#123;</span><br><span class="line">      proxy_pass http://localhost:7072/;</span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">      proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="yum镜像源的问题"><a href="#yum镜像源的问题" class="headerlink" title="yum镜像源的问题"></a>yum镜像源的问题</h3><p><em>如果出现下面的情况</em></p><p><img src="/img/wge-fault.png" alt="yum镜像源问题"></p><p><em>就是yum镜像源的问题,执行下面的指令</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份原有的 yum 配置文件</span></span><br><span class="line">sudo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载阿里云的 CentOS 镜像源配置文件</span></span><br><span class="line">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理缓存并更新 yum</span></span><br><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure><h3 id="服务器防火墙没开，导致无法远程连接数据库"><a href="#服务器防火墙没开，导致无法远程连接数据库" class="headerlink" title="服务器防火墙没开，导致无法远程连接数据库"></a>服务器防火墙没开，导致无法远程连接数据库</h3><p><em>如果本地出现<code>2002 - Can&#39;t connect to server on &#39;193.8.173.139&#39; (10060)</code></em></p><p><em>需要打开服务器的防火墙</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
